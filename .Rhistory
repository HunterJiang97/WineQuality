return(yhat)
}
model.opttree(CVtrain2[[1]], CVtest2[[1]])
model.opttree <- function(train, test){
model_tree <- tree(as.factor(quality) ~ ., data = train)
cv_tree <- cv.tree(model_tree, FUN = prune.misclass)
model_opt <- prune.tree(model_tree, best = cv_tree$size[which.min(cv_tree$dev)])
yhat <- predict(model_opt, test, type = "class")
return(yhat)
}
model.opttree(CVtrain2[[1]], CVtest2[[1]])
source('~/Desktop/ST563/hws/final/CV_Classification.r')
OR_table
colMeans(OR_table)
?randomForest
source('~/Desktop/ST563/hws/final/CV_Classification.r')
source('~/Desktop/ST563/hws/final/CV_Classification.r')
source('~/Desktop/ST563/hws/final/CV_Classification.r')
OR_table
source('~/Desktop/ST563/hws/final/CV_Classification.r')
source('~/Desktop/ST563/hws/final/CV_Classification.r')
OR_table
install
install.packages("gbm")
model.boosting <- function(train, test){
# Boosting
train$quality <- train$quality - 1
model_boost <- gbm(quality ~. , data = train, distribution = "bernoulli", n.trees = 100)
yhat <- predict(model_boost, test)
}
model.boosting(CVtrain2[[1]], CVtest2[[1]])
library(gbm)
model.boosting(CVtrain2[[1]], CVtest2[[1]])
model.boosting <- function(train, test){
# Boosting
train$quality <- train$quality - 1
model_boost <- gbm(quality ~. , data = train, distribution = "bernoulli", n.trees = 100)
yhat <- predict(model_boost, test)
return(yhat)
}
model.boosting(CVtrain2[[1]], CVtest2[[1]])
model.boosting <- function(train, test){
# Boosting
train$quality <- train$quality - 1
model_boost <- gbm(quality ~. , data = train, distribution = "bernoulli", n.trees = 100)
yhat <- predict(model_boost, test, ntree = 100)
return(yhat)
}
model.boosting(CVtrain2[[1]], CVtest2[[1]])
model.boosting <- function(train, test){
# Boosting
train$quality <- train$quality - 1
model_boost <- gbm(quality ~. , data = train, distribution = "bernoulli", n.trees = 100)
yhat <- predict(model_boost, newdata = test, ntree = 100)
return(yhat)
}
model.boosting(CVtrain2[[1]], CVtest2[[1]])
install.packages("adabag")
library(adabag)
model.bag <- function(train, test){
# Bagging
train$quality <- as.factor(train$quality)
model_bag <- randomForest(quality~.,train, mtry=10, ntree = 100, importance=TRUE)
yhat <- predict(model_bag, test)
return(yhat)
}
model.boosting(CVtrain2[[1]], CVtest2[[1]])
model.boosting <- function(train, test){
# Boosting
train$quality <- train$quality - 1
model_boost <- boosting(quality~., data=train, boos=TRUE, mfinal=100)
yhat <- predict(model_boost, newdata = test, ntree = 100)
return(yhat)
}
model.boosting(CVtrain2[[1]], CVtest2[[1]])
?boosting
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE, mfinal=3)
iris.adaboost
# Boosting
train$quality <- train$quality - 1
model_boost <- boosting(quality~., data=train, boos=TRUE, mfinal=100)
# Boosting
train$quality <- train$quality - 1
model_boost <- boosting(quality~., data=train, boos=TRUE, mfinal=100, control = (minsplit = 0))
model.boosting <- function(train, test){
# Boosting
train$quality <- train$quality - 1
model_boost <- boosting(quality~., data=train, boos=TRUE, mfinal=100, control = rpart.control(cp = -1))
yhat <- predict(model_boost, newdata = test, ntree = 100)
return(yhat)
}
model.boosting(CVtrain2[[1]], CVtest2[[1]])
# Boosting
train$quality <- train$quality - 1
model_boost <- boosting(quality~., data=train, boos=TRUE, mfinal=10, control = rpart.control(minsplit = 0))
yhat <- predict(model_boost, newdata = test, ntree = 100)
# Boosting
train$quality <- as.factor(train$quality - 1)
model_boost <- boosting(quality~., data=train, boos=TRUE, mfinal=100, control = rpart.control(minsplit = 0))
yhat <- predict(model_boost, newdata = test, ntree = 100)
yhat
yhat$prob > 0.5
# Boosting
train$quality <- as.factor(train$quality)
p_boo <- predict(model_boost, newdata = test, ntree = 100)
yhat$prob
dim(yhat$prob)
yhat <- rep(0, dim(p_boo$prob)[1])
source('~/Desktop/ST563/hws/final/CV_Classification.r')
source('~/Desktop/ST563/hws/final/CV_Classification.r')
# Boosting
train$quality <- as.factor(train$quality)
model_boost <- boosting(quality~., data=train, boos=TRUE, mfinal=10, control = rpart.control(minsplit = 0))
p_boo <- predict(model_boost, newdata = test, ntree = 10)
p_boo
p_boo$prob
p_boo$prob[,1]
p_boo$prob[,1] > 0.5
yhat <- rep(1, dim(p_boo$prob)[1])
yhat
yhat[p_boo$prob[,1] > 0,5] <- 2
p_boo$prob[,1] > 0,5
p_boo$prob[,1]
p_boo$prob[,1] > 0.5
source('~/Desktop/ST563/hws/final/CV_Classification.r')
OR_table
source('~/Desktop/ST563/hws/final/CV_Classification.r')
OR_table
model.Logit(CVtrain2[[1]], CVtrain2[[1]])
model.Logit(CVtrain2[[1]], CVtest2[[1]])
train$quality <- train$quality - 1
# Logistic Regression
model_Logit <- glm(quality ~ ., family = binomial(), data = train)
p_Logit <- predict(model_Logit, newdata = test, type = "response")
p_Logit
install.packages("adabag")
source('F:/user/Desktop/workflow/ST563/hws/final/CV_Classification.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
s <- apply(OR_table, 1, sd)
s
s <- apply(OR_table, 2, sd)
s
?OR_table
?apply
s <- apply(OR_table, 2, sd)
s
s <- apply(OR_table, margin = 2, sd)
s <- apply(OR_table, margin = 2, fun = sd)
s <- apply(OR_table, margin = 2, fun = "sd")
s <- apply(OR_table, 2, sd)
s
s <- apply(OR_table, 1, sd)
m <- colMeans(OR_table)
s <- apply(OR_table, 2, sd)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
Result <- rbind(m, s)
colnames(Results) <- c("LDA", "QDA", "Logistic", "KNN1", "KNN3", "KNN5", "KNN7" , "Optimal Tree", "Random Forest", "Bagging")
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
# cv function to use
CV_fun <- fun ction(trainset, testset){
ptm1 <- proc.time()
yhat_LDA <- model.LDA(trainset, testset)
ptm2 <- proc.time()
yhat_QDA <- model.QDA(trainset, testset)
ptm3 <- proc.time()
yhat_Log <- model.Logit(trainset, testset)
ptm4 <- proc.time()
yhat_knn1 <- model.knn(trainset, testset, 1)
ptm5 <- proc.time()
yhat_knn3 <- model.knn(trainset, testset, 3)
ptm6 <- proc.time()
yhat_knn5 <- model.knn(trainset, testset, 5)
ptm7 <- proc.time()
yhat_knn7 <- model.knn(trainset, testset, 7)
ptm8 <- proc.time()
yhat_tree <- model.opttree(trainset, testset)
ptm9 <- proc.time()
yhat_rf <- model.rf(trainset, testset, 5)
ptm10 <- proc.time()
yhat_bag <- model.bag(trainset, testset)
ptm11 <- proc.time()
return(list(yhat_LDA, yhat_QDA, yhat_Log, yhat_knn1, yhat_knn3,
yhat_knn5, yhat_knn7, yhat_tree, yhat_rf, yhat_bag))
}
# cv function to use
CV_fun <- fun ction(trainset, testset){
ptm1 <- proc.time()
yhat_LDA <- model.LDA(trainset, testset)
ptm2 <- proc.time()
yhat_QDA <- model.QDA(trainset, testset)
ptm3 <- proc.time()
yhat_Log <- model.Logit(trainset, testset)
ptm4 <- proc.time()
yhat_knn1 <- model.knn(trainset, testset, 1)
ptm5 <- proc.time()
yhat_knn3 <- model.knn(trainset, testset, 3)
ptm6 <- proc.time()
yhat_knn5 <- model.knn(trainset, testset, 5)
ptm7 <- proc.time()
yhat_knn7 <- model.knn(trainset, testset, 7)
ptm8 <- proc.time()
yhat_tree <- model.opttree(trainset, testset)
ptm9 <- proc.time()
yhat_rf <- model.rf(trainset, testset, 5)
ptm10 <- proc.time()
yhat_bag <- model.bag(trainset, testset)
ptm11 <- proc.time()
return(list(yhat_LDA, yhat_QDA, yhat_Log, yhat_knn1, yhat_knn3,
yhat_knn5, yhat_knn7, yhat_tree, yhat_rf, yhat_bag))
}
# cv function to use
CV_fun <- function(trainset, testset){
ptm1 <- proc.time()
yhat_LDA <- model.LDA(trainset, testset)
ptm2 <- proc.time()
yhat_QDA <- model.QDA(trainset, testset)
ptm3 <- proc.time()
yhat_Log <- model.Logit(trainset, testset)
ptm4 <- proc.time()
yhat_knn1 <- model.knn(trainset, testset, 1)
ptm5 <- proc.time()
yhat_knn3 <- model.knn(trainset, testset, 3)
ptm6 <- proc.time()
yhat_knn5 <- model.knn(trainset, testset, 5)
ptm7 <- proc.time()
yhat_knn7 <- model.knn(trainset, testset, 7)
ptm8 <- proc.time()
yhat_tree <- model.opttree(trainset, testset)
ptm9 <- proc.time()
yhat_rf <- model.rf(trainset, testset, 5)
ptm10 <- proc.time()
yhat_bag <- model.bag(trainset, testset)
ptm11 <- proc.time()
return(list(yhat_LDA, yhat_QDA, yhat_Log, yhat_knn1, yhat_knn3,
yhat_knn5, yhat_knn7, yhat_tree, yhat_rf, yhat_bag))
}
ptm1 <- proc.time()
ptm2 <- proc.time()
ptm2 - ptm1
(ptm2 - ptm1)[3]
ptm2 <- proc.time()[3]
ptm2
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
YhatsLList[[2]]
YhatsLList[[2]]
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
YhatsLList[[1]]
YhatsLList[[1]][[1]]
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
YhatsLList[[1]]
YhatsLList[[1]][[1]]
dim(YhatsLList[[1]][[1]])
length(YhatsLList[[1]][[1]])
YhatsLList[[2]]
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
install.packages("ROSE")
library(ROSE)
CVtrain2
CVtrain2[[1]]
CVtrain2[[1]]$quality
table(CVtrain2[[1]]$quality)
table(CVtrain2[[1]]$quality)[1]
table(CVtrain2[[1]]$quality)[2]
nn <- max(table(CVtrain2[[1]]$quality))
nn
CVtrain2[[ii]] <- ovun.sample(quality ~ ., data = CVtrain2[[ii]], method = "over",N = nn*2)$data
dim(CVtrain2[[ii]])
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class_B.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class_B.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
table(CVtrain2[[1]])
table(CVtrain2[[1]]$quality)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
table(CVtrain2[[1]])
table(CVtrain2[[1]]$quality)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
model.opttree(CVtrain2[[1]], CVtest2[[1]])
model.opttree(CVtrain2[[2]], CVtest2[[2]])
model.opttree(CVtrain2[[3]], CVtest2[[3]])
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
install.packages(multinom)
install.packages(nnet)
install.packages("nnet")
install.packages("nnet")
model.Logit <- function(train, test){
train$quality <- as.factor(train$quality)
# Logistic Regression
model_Logit <- multinom(quality ~ ., data = train)
yhat_Logit <- predict(model_Logit, newdata = test, type = "class")
return(yhat_Logit)
}
model.Logit(CVtrain2[[1]], CVtest2[[1]])
library(nnet)
model.Logit(CVtrain2[[1]], CVtest2[[1]])
model.Logit <- function(train, test){
train$quality <- as.factor(train$quality)
# Logistic Regression
model_Logit <- multinom(quality ~ ., data = train)
yhat_Logit <- predict(model_Logit, newdata = test, type = "class")
return(yhat_Logit[[3]])
}
model.Logit(CVtrain2[[1]], CVtest2[[1]])
model.Logit <- function(train, test){
train$quality <- as.factor(train$quality)
# Logistic Regression
model_Logit <- multinom(quality ~ ., data = train)
yhat_Logit <- predict(model_Logit, newdata = test, type = "class")
return(yhat_Logit[[2]])
}
model.Logit(CVtrain2[[1]], CVtest2[[1]])
model.Logit <- function(train, test){
train$quality <- as.factor(train$quality)
# Logistic Regression
model_Logit <- multinom(quality ~ ., data = train)
yhat_Logit <- predict(model_Logit, newdata = test, type = "class")
return(yhat_Logit[[1]])
}
model.Logit(CVtrain2[[1]], CVtest2[[1]])
model.Logit <- function(train, test){
train$quality <- as.factor(train$quality)
# Logistic Regression
model_Logit <- multinom(quality ~ ., data = train)
yhat_Logit <- predict(model_Logit, newdata = test, type = "class")
return(yhat_Logit)
}
model.Logit <- function(train, test){
train$quality <- as.factor(train$quality)
# Logistic Regression
model_Logit <- multinom(quality ~ ., data = train)
yhat_Logit <- predict(model_Logit, newdata = test, type = "class")
return(yhat_Logit)
}
res <- model.Logit(CVtrain2[[1]], CVtest2[[1]])
res
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
?ovun.sample
# Over-Sample function
over.sample <- function(response, data){
num <- table(response)
return(num)
}
over.sample(CVtrain2[[1]]$quality, CVtrain2[[1]])
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
table(CVtrain2[[1]])
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
TrainB <- over.sample(CVtrain2[[1]]$quality, CVtrain2[[1]])
TrainB
TrainB[1]
TrainB[2]
# Over-Sample function
over.sample <- function(response, data){
num <- table(response)
maxn <- max(num)
df <- rep(data[1,], length(num))
for (ii in 1:length(num)){
if (num[ii] == maxn){
} else {
}
}
return(num)
}
TrainB <- over.sample(CVtrain2[[1]]$quality, CVtrain2[[1]])
# Over-Sample function
over.sample <- function(response, data){
num <- table(response)
maxn <- max(num)
df <- rep(data[1,], length(num))
for (ii in 1:length(num)){
if (num[ii] == maxn){
} else {
}
}
return(df)
}
TrainB <- over.sample(CVtrain2[[1]]$quality, CVtrain2[[1]])
TrainB
sample(1:10, 5)
sample(1:10, 5, replace = F)
sample(1:10, 100, replace = F)
sample(1:10, 100, replace = T)
# Over-Sample function
over.sample <- function(response, data){
num <- table(response)
maxn <- max(num)
df <- list()
for (ii in 1:length(num)){
if (num[ii] == maxn){
df[[ii]] <- data[which(data$quality == ii),]
} else {
tmp <- data[which(data$quality == ii),]
indi <- sample(1:dim(tmp,1), maxn, replace = T)
df[[ii]] <- tmp[indi,]
}
}
return(df)
}
TrainB <- over.sample(CVtrain2[[1]]$quality, CVtrain2[[1]])
TrainB
# Over-Sample function
over.sample <- function(response, data){
num <- table(response)
maxn <- max(num)
df <- list()
for (ii in 1:length(num)){
if (num[ii] == maxn){
df[[ii]] <- data[which(data$quality == ii),]
} else {
tmp <- data[which(data$quality == ii),]
indi <- sample(1:dim(tmp)[1], maxn, replace = T)
df[[ii]] <- tmp[indi,]
}
}
return(df)
}
TrainB <- over.sample(CVtrain2[[1]]$quality, CVtrain2[[1]])
TrainB
dim(TrainB[[1]])
dim(TrainB[[2]])
dim(TrainB[[3]])
# Over-Sample function
over.sample <- function(response, data){
num <- table(response)
maxn <- max(num)
df <- list()
for (ii in 1:length(num)){
if (num[ii] == maxn){
df[[ii]] <- data[which(data$quality == ii),]
} else {
tmp <- data[which(data$quality == ii),]
indi <- sample(1:dim(tmp)[1], maxn, replace = T)
df[[ii]] <- tmp[indi,]
}
}
df1 <- rbind(df[[1]], df[[2]], df[[3]])
return(df1)
}
TrainB <- over.sample(CVtrain2[[1]]$quality, CVtrain2[[1]])
TrainB
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
# Over-Sample function
over.sample <- function(response, data){
num <- table(response)
minn <- min(num)
df <- list()
for (ii in 1:length(num)){
if (num[ii] == minn){
df[[ii]] <- data[which(data$quality == ii),]
} else {
tmp <- data[which(data$quality == ii),]
indi <- sample(1:dim(tmp)[1], minn, replace = F)
df[[ii]] <- tmp[indi,]
}
}
df1 <- rbind(df[[1]], df[[2]], df[[3]])
return(df1)
}
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassB.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/dataReading.R', echo=TRUE)
# 7 class: traindat7
TrainDat7 <- TrainDat6 <- TrainDat5 <- TrainDat4 <- TrainDat3 <- TrainDat2 <- wine[train,]
TestDat7 <- TestDat6 <- TestDat5 <- TestDat4 <- TestDat3 <- TestDat2 <- wine[test, ]
hclust(TrainDat7$quality)
hclust(dist(TrainDat7$quality))
obj <- hclust(dist(TrainDat7$quality))
obj
plot(obj)
source('F:/user/Desktop/workflow/ST563/hws/final/dataReading.R', echo=TRUE)
for (ii in 1:12){
hist(wine[,ii], breaks = 30, main = name[ii], xlab = "")
}
source('F:/user/Desktop/workflow/ST563/hws/final/dataReading.R', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class_O.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_2Class_U.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassO.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassU.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_7Class.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_7CLassO.r', echo=TRUE)
library(e1071)
tune.out = tune(svm, quality ~ ., data = Ttrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10, 100)))
tune.out$best.parameters
model1 <- svm(quality ~., data = Train, kernel = "linear", cost = 0.01)
model1 <- svm(quality ~., data = Ttrain, kernel = "linear", cost = 0.01)
predict(model1, Ttest)
s <- predict(model1, Ttest)
length(s)
2^-3
tune.out$best.parameters
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassO.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassO.r', echo=TRUE)
length(YhatList)
length(YhatLList)
length(YhatsLList)
length(YhatsLList[[1]]) - 1
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassO.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassO.r', echo=TRUE)
source('F:/user/Desktop/workflow/ST563/hws/final/CV_3CLassO.r', echo=TRUE)
